from coinbase_client.client import Client
import json

client = Client()

def createOrder(client_order_id, product_id, side, order_type, order_configuration):
    """
    Create an order with the given parameters.

    :param client_order_id: A unique ID generated by the client for this order.
    :param product_id: The ID of the product to order.
    :param side: The side of the order (e.g., 'buy' or 'sell').
    :param order_type: The type of order (e.g., 'limit_limit_gtc').
    :param order_configuration: A dictionary containing order details such as price, size, and post_only.
    :return: A dictionary containing the response from the server.
    """
    payload = {
        "client_order_id": client_order_id,
        "product_id": product_id,
        "side": side,
        "order_configuration": {
            order_type: order_configuration
        }
    }
    # print("Payload being sent to server:", payload)  # For debugging
    return client('POST', '/api/v3/brokerage/orders', payload)

def cancelOrders(order_ids):
    """
    Initiate cancel requests for one or more orders.

    This function uses the POST method to initiate cancel requests for one or more orders on the Coinbase Advanced Trade API.

    :param order_ids: A list of order IDs for which cancel requests should be initiated.
    :return: A dictionary containing the response from the server. A successful response will return a 200 status code. An unexpected error will return a default error response.
    """
    body = json.dumps({"order_ids": order_ids})
    return client('POST', '/api/v3/brokerage/orders/batch_cancel', body)


def listOrders(**kwargs):
    """
    Retrieve a list of historical orders.

    This function uses the GET method to retrieve a list of historical orders from the Coinbase Advanced Trade API.
    The orders are returned in a batch format.

    :param kwargs: Optional parameters that can be passed to the API. These can include:
        'product_id': Optional string of the product ID. Defaults to null, or fetch for all products.
        'order_status': A list of order statuses.
        'limit': A pagination limit with no default set.
        'start_date': Start date to fetch orders from, inclusive.
        'end_date': An optional end date for the query window, exclusive.
        'user_native_currency': (Deprecated) String of the users native currency. Default is `USD`.
        'order_type': Type of orders to return. Default is to return all order types.
        'order_side': Only orders matching this side are returned. Default is to return all sides.
        'cursor': Cursor used for pagination.
        'product_type': Only orders matching this product type are returned. Default is to return all product types.
        'order_placement_source': Only orders matching this placement source are returned. Default is to return RETAIL_ADVANCED placement source.
        'contract_expiry_type': Only orders matching this contract expiry type are returned. Filter is only applied if ProductType is set to FUTURE in the request.
    :return: A dictionary containing the response from the server. This will include details about each order, such as the order ID, product ID, side, type, and status.
    """
    return client('GET', '/api/v3/brokerage/orders/historical/batch', params=kwargs)


def listFills(**kwargs):
    """
    Retrieve a list of fills filtered by optional query parameters.

    This function uses the GET method to retrieve a list of fills from the Coinbase Advanced Trade API.
    The fills are returned in a batch format.

    :param kwargs: Optional parameters that can be passed to the API. These can include:
        'order_id': Optional string of the order ID.
        'product_id': Optional string of the product ID.
        'start_sequence_timestamp': Start date. Only fills with a trade time at or after this start date are returned.
        'end_sequence_timestamp': End date. Only fills with a trade time before this start date are returned.
        'limit': Maximum number of fills to return in response. Defaults to 100.
        'cursor': Cursor used for pagination. When provided, the response returns responses after this cursor.
    :return: A dictionary containing the response from the server. This will include details about each fill, such as the fill ID, product ID, side, type, and status.
    """
    return client('GET', '/api/v3/brokerage/orders/historical/fills', params=kwargs)


def getOrder(order_id):
    """
    Retrieve a single order by order ID.

    This function uses the GET method to retrieve a single order from the Coinbase Advanced Trade API.

    :param order_id: The ID of the order to retrieve.
    :return: A dictionary containing the response from the server. This will include details about the order, such as the order ID, product ID, side, type, and status.
    """
    return client('GET', f'/api/v3/brokerage/orders/historical/{order_id}')